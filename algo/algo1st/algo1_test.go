package algo1st

import (
	"fmt"
	"reflect"
	"strings"
	"testing"
)

func Test(t *testing.T) {
	cs := []string{"j?qg??b"}
	want := []string{"jlqghjb"}
	for i, c := range cs {
		got := modifyString(c)
		if !reflect.DeepEqual(got, want[i]) {
			t.Errorf("error, req:%v, want:%v, got:%v", c, want[i], got)
		}
	}
}

func TestSimplifyPath(t *testing.T) {
	cs := []string{"/home/", "/../", "/home//foo/", "/a/./b/../../c/", "/a//b////c/d//././/.."}
	want := []string{"/home", "/", "/home/foo", "/c", "/a/b/c"}
	for i, c := range cs {
		got := simplifyPath(c)
		if !reflect.DeepEqual(got, want[i]) {
			t.Errorf("error, req:%v, want:%v, got:%v", c, want[i], got)
		}
	}
}

func TestModifyString(t *testing.T) {
	cs := []string{"j?qg??b"}
	want := []string{"jlqghjb"}
	for i, c := range cs {
		got := modifyString(c)
		if !reflect.DeepEqual(got, want[i]) {
			t.Errorf("error, req:%v, want:%v, got:%v", c, want[i], got)
		}
	}
}

func TestCatMouseGame(t *testing.T) {
	cs := [][][]int{
		{{1, 3}, {0}, {3}, {0, 2}},
		{{2, 5}, {3}, {0, 4, 5}, {1, 4, 5}, {2, 3}, {0, 2, 3}},
		{{2, 3, 5, 6, 9, 12, 14, 16, 17, 18, 29, 32, 37, 44, 49}, {5, 6, 10, 12, 14, 16, 19, 20, 21, 24, 25, 27, 30, 31, 32, 33, 40, 41, 46}, {0, 6, 8, 9, 14, 16, 17, 18, 23, 25, 33, 34, 35, 37, 40}, {0, 4, 6, 8, 11, 14, 17, 18, 24, 30, 32, 34, 35, 36, 37, 38, 44}, {3, 6, 9, 10, 13, 14, 19, 26, 27, 31, 32, 33, 37, 43, 45}, {0, 1, 12, 20, 21, 22, 26, 31, 33, 34, 36, 37, 40, 41, 44, 46}, {0, 1, 2, 3, 4, 10, 11, 13, 20, 22, 24, 27, 29, 30, 31, 36, 37, 39, 42}, {11, 13, 15, 23, 24, 25, 27, 29, 31, 33, 34, 36, 39, 40, 41, 43, 44}, {2, 3, 9, 10, 13, 15, 18, 22, 24, 32, 37, 44, 45, 47, 48, 49}, {0, 2, 4, 8, 12, 13, 20, 22, 28, 40, 41, 42, 44, 45, 49}, {1, 4, 6, 8, 11, 13, 14, 16, 20, 25, 27, 28, 30, 32, 33, 34, 35, 42, 43, 48, 49}, {3, 6, 7, 10, 13, 15, 16, 18, 19, 21, 24, 28, 30, 32, 36, 40, 41, 45, 46, 47}, {0, 1, 5, 9, 18, 30, 33, 35, 36, 38, 43, 44, 45, 48, 49}, {4, 6, 7, 8, 9, 10, 11, 15, 17, 18, 24, 25, 26, 28, 31, 33, 36, 42, 45, 46}, {0, 1, 2, 3, 4, 10, 16, 18, 19, 20, 21, 23, 25, 26, 29, 33, 35, 38, 40, 42, 44, 46, 47}, {7, 8, 11, 13, 23, 24, 25, 26, 27, 28, 29, 30, 31, 39, 42, 46}, {0, 1, 2, 10, 11, 14, 20, 23, 25, 27, 28, 32, 34, 35, 37, 44, 46, 48}, {0, 2, 3, 13, 18, 19, 20, 23, 24, 26, 27, 28, 31, 32, 34, 35, 36, 37, 41, 42, 48}, {0, 2, 3, 8, 11, 12, 13, 14, 17, 21, 22, 23}, {1, 4, 11, 14, 17, 20, 21, 25, 26, 29, 30, 31, 33, 36, 41, 42}, {1, 5, 6, 9, 10, 14, 16, 17, 19, 24, 26, 27, 32, 33, 38, 41, 46}, {1, 5, 11, 14, 18, 19, 22, 27, 32, 34, 35, 36, 38, 41, 43, 45, 46}, {5, 6, 8, 9, 18, 21, 24, 25, 31, 34, 36, 38, 40, 41, 42, 44, 48, 49}, {2, 7, 14, 15, 16, 17, 18, 24, 26, 27, 29, 30, 31, 32, 33, 34, 37, 38, 39, 40, 41, 43, 45}, {1, 3, 6, 7, 8, 11, 13, 15, 17, 20, 22, 23, 33, 34, 37, 38, 39, 40, 41, 44, 48}, {1, 2, 7, 10, 13, 14, 15, 16, 19, 22, 26, 38, 39, 40, 42, 45, 49}, {4, 5, 13, 14, 15, 17, 19, 20, 23, 25, 29, 30, 33, 34, 35, 39, 47}, {1, 4, 6, 7, 10, 15, 16, 17, 20, 21, 23, 28, 30, 32, 35, 37, 40, 43}, {9, 10, 11, 13, 15, 16, 17, 27, 29, 39, 44, 46}, {0, 6, 7, 14, 15, 19, 23, 26, 28, 31, 32, 33, 40, 45, 46, 47}, {1, 3, 6, 10, 11, 12, 15, 19, 23, 26, 27, 35, 36, 40, 45, 49}, {1, 4, 5, 6, 7, 13, 15, 17, 19, 22, 23, 29, 32, 33, 34, 36, 39, 45, 46, 49}, {0, 1, 3, 4, 8, 10, 11, 16, 17, 20, 21, 23, 27, 29, 31, 33, 37, 38, 42, 45}, {1, 2, 4, 5, 7, 10, 12, 13, 14, 19, 20, 23, 24, 26, 29, 31, 32, 35, 36, 41, 42, 48, 49}, {2, 3, 5, 7, 10, 16, 17, 21, 22, 23, 24, 26, 31, 36, 37, 41, 45, 46, 47, 49}, {2, 3, 10, 12, 14, 16, 17, 21, 26, 27, 30, 33, 36, 42, 43, 45, 49}, {3, 5, 6, 7, 11, 12, 13, 17, 19, 21, 22, 30, 31, 33, 34, 35, 37, 38, 39, 41, 46}, {0, 2, 3, 4, 5, 6, 8, 16, 17, 23, 24, 27, 32, 34, 36, 39, 41, 43, 49}, {3, 12, 14, 20, 21, 22, 23, 24, 25, 32, 36, 41, 44}, {6, 7, 15, 23, 24, 25, 26, 28, 31, 36, 37, 45, 49}, {1, 2, 5, 7, 9, 11, 14, 22, 23, 24, 25, 27, 29, 30, 42, 43, 45}, {1, 5, 7, 9, 11, 17, 19, 20, 21, 22, 23, 24, 33, 34, 36, 37, 38, 45, 48}, {6, 9, 10, 13, 14, 15, 17, 19, 22, 25, 32, 33, 35, 40, 45}, {4, 7, 10, 12, 21, 23, 27, 35, 37, 40, 46}, {0, 3, 5, 7, 8, 9, 12, 14, 16, 22, 24, 28, 38, 46, 47}, {4, 8, 9, 11, 12, 13, 21, 23, 25, 29, 30, 31, 32, 34, 35, 39, 40, 41, 42, 47, 49}, {1, 5, 11, 13, 14, 15, 16, 20, 21, 28, 29, 31, 34, 36, 43, 44, 47}, {8, 11, 14, 26, 29, 34, 44, 45, 46, 48, 49}, {8, 10, 12, 16, 17, 22, 24, 33, 41, 47}, {0, 8, 9, 10, 12, 22, 25, 30, 31, 33, 34, 35, 37, 39, 45, 47}},
	}
	want := []int{1, 0, 1}
	for i, c := range cs {
		got := catMouseGame(c)
		if !reflect.DeepEqual(got, want[i]) {
			t.Errorf("error, req:%v, want:%v, got:%v", c, want[i], got)
		}
	}
}

func TestCheckPerfectNumber(t *testing.T) {
	cs := []int{28, 7, 6}
	want := []bool{true, false, true}
	for i, c := range cs {
		got := checkPerfectNumber(c)
		if !reflect.DeepEqual(got, want[i]) {
			t.Errorf("error, req:%v, want:%v, got:%v", c, want[i], got)
		}
	}
}

func TestNumFriendRequests(t *testing.T) {
	cs := [][]int{{16, 16}, {16, 17, 18}, {20, 30, 100, 110, 120}, {16, 16, 16, 16, 16, 16, 16, 16}}
	want := []int{2, 2, 3, 56}
	for i, c := range cs {
		got := numFriendRequests(c)
		if !reflect.DeepEqual(got, want[i]) {
			t.Errorf("error, req:%v, want:%v, got:%v", c, want[i], got)
		}
	}
}

func TestNumWaterBottles(t *testing.T) {
	got := numWaterBottles(15, 4)
	want := 19
	fmt.Println(got)
	if !reflect.DeepEqual(got, want) {
		t.Error("error")
	}
}

func TestMaxIncreaseKeepingSkyline(t *testing.T) {
	test := [][]int{{3, 0, 8, 4}, {2, 4, 5, 7}, {9, 2, 6, 3}, {0, 3, 1, 0}}
	got := maxIncreaseKeepingSkyline(test)
	want := 35
	if !reflect.DeepEqual(got, want) {
		t.Error("error")
	}
}

func TestToLowerCase(t *testing.T) {
	testStr := "Hello World!"

	got := toLowerCase(testStr)
	want := strings.ToLower(testStr)

	if !reflect.DeepEqual(got, want) {
		t.Error("error")
	}
}
